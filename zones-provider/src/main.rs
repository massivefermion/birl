use std::collections::BTreeMap;
use std::fs::{create_dir, read_to_string, remove_dir_all, remove_file, File};
use std::io::{self, Cursor, Write};
use std::str::from_utf8;

use flate2::read::GzDecoder;
use parse_zoneinfo::line::{Line, LineParser};
use parse_zoneinfo::table::TableBuilder;
use regex::Regex;
use reqwest::Client;
use tar::Archive;

// This function is needed until zoneinfo_parse handles comments correctly.
// Technically a '#' symbol could occur between double quotes and should be
// ignored in this case, however this never happens in the tz database as it
// stands.
fn strip_comments(mut line: String) -> String {
    if let Some(pos) = line.find('#') {
        line.truncate(pos)
    }
    line
}

const TZ_DATABASE_PAGE_URL: &str = "https://www.iana.org/time-zones";
const TARBALL_PATH: &str = "tz-database.tar.gz";
const TZ_DATABASE_PATH: &str = "tz-database";
const GLEAM_FILE_PATH: &str = "src/birl/zones.gleam";
const FILES_TO_PARSE: [&str; 9] = [
    "africa",
    "antarctica",
    "asia",
    "australasia",
    "backward",
    "etcetera",
    "europe",
    "northamerica",
    "southamerica",
];

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let re = Regex::new(r#"<td><a href="(.*tzdata.*)""#).unwrap();
    let client = Client::builder()
        .user_agent("https://hex.pm/packages/birl")
        .build()?;

    let response = client.get(TZ_DATABASE_PAGE_URL).send().await?;
    let html = response.bytes().await?;

    let td_data = re.captures(from_utf8(&html)?).unwrap();
    let url = td_data.get(1).unwrap().as_str();

    let response = client.get(url).send().await?;
    let mut content = Cursor::new(response.bytes().await?);
    let mut file = File::create(TARBALL_PATH)?;
    io::copy(&mut content, &mut file)?;

    let tar_gz = File::open(TARBALL_PATH)?;
    let tar = GzDecoder::new(tar_gz);
    let mut archive = Archive::new(tar);
    create_dir(TZ_DATABASE_PATH)?;
    archive.unpack(TZ_DATABASE_PATH)?;
    remove_file(TARBALL_PATH)?;

    let mut zones: BTreeMap<String, i64> = BTreeMap::new();
    for file in FILES_TO_PARSE {
        let lines = read_to_string(TZ_DATABASE_PATH.to_owned() + "/" + file)
            .unwrap()
            .lines()
            .map(|line| strip_comments(line.to_string()))
            .collect::<Vec<_>>();

        let parser = LineParser::default();
        let mut builder = TableBuilder::new();
        for line in &lines {
            match parser.parse_str(line).unwrap() {
                Line::Zone(zone) => builder.add_zone_line(zone).unwrap(),
                Line::Continuation(cont) => builder.add_continuation_line(cont).unwrap(),
                Line::Rule(rule) => builder.add_rule_line(rule).unwrap(),
                Line::Link(link) => builder.add_link_line(link).unwrap(),
                Line::Space => {}
            }
        }

        let table = builder.build();

        table.zonesets.iter().for_each(|(name, info)| {
            let last_info = info.iter().find(|item| item.end_time.is_none()).unwrap();
            zones.insert((*name).clone(), last_info.offset);
        });
    }

    remove_dir_all(TZ_DATABASE_PATH)?;

    let mut gleam_map = zones.iter().fold(String::new(), |mut acc, (name, offset)| {
        acc += "#(";
        acc = acc + "\"" + name + "\",";
        acc += &offset.to_string();
        acc += "),";
        acc
    });

    gleam_map = String::from("//// This file is generated by zones-provider\n\n")
        + &String::from("pub const list = [")
        + &gleam_map
        + &String::from("]");

    let mut gleam_file = File::create(GLEAM_FILE_PATH)?;
    gleam_file.write_all(gleam_map.as_bytes())?;

    Ok(())
}
